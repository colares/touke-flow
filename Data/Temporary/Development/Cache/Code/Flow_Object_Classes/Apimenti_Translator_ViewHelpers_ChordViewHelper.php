<?php
namespace Apimenti\Translator\ViewHelpers;

/**
 * View Helper which creates a control group form field based on twitter bootstrap
 */

class ChordViewHelper_Original extends \TYPO3\Fluid\Core\ViewHelper\AbstractConditionViewHelper {
	/**
	 *
	 * @return string the rendered string
	 */
	public function render() {
		$out  = '<div class="form-actions">';
		$out .= '<div class="row">';
		$out .= '<div id="responseMsg"></div>';
		$out .= $this->renderChildren();
		$out .= '</div>';
		$out .= '</div>';
		return $out;
	}
   
   
	public function parseChords(){


	    
//	    $html = "";
//       	$javascript = "$(document).ready(function() {";
//		$chordLi =  "";

       	$slideId = 0;
   		foreach($this->songChords as $chord){
   				
       		$rootNote = "";

			// Grabing the root note. ex.: C, D#, Gb etc. 
       		if(preg_match($this->regexpRootNote, $chord, $rootNote)){
       			$chordRootNote = $rootNote[0]; //got the root note
       		}	
       		
       		// Remove the root note from the chord and get the chord notation formula
       		$chordFormula = preg_replace($this->regexpRootNote, '', $chord); 
   		
   		    /**
   		    * @todo treat bass note kind! They say "just remove it for ukulele", but it could be better!
   		    */
       		// for now, let's remove the bass note from chord
       		$regexpBass = '/\/[A-G]#?b?/s'; // 
       		$bassNote = "";	
       		if(preg_match($regexpBass, $chordFormula, $bass)){ //if exists		
       			$bassNote = $bass[0]; // without slash / 
       			$chordFormula = preg_replace($regexpBass, '', $chordFormula); //remove it from formula
       		}	
   		
       		// Slash (/) becomes underline (_)
       		$translatedChordFormula = str_replace("/", "_", $chordFormula);
       		// $translatedChordFormula = str_replace("#", "_srp_", $chordFormula);
       		// $translatedChordFormula = str_replace("(", "_opr_", $chordFormula);
       		// $translatedChordFormula = str_replace(")", "_cpr_", $chordFormula);
       		// $translatedChordFormula = str_replace("-", "_mns_", $chordFormula);
       		// $translatedChordFormula = str_replace("+", "_pls_", $chordFormula);
       		$translatedBassNote = str_replace("/", "_", $bassNote);
       		// translating to a known notation
       		$translatedChordFormula = strtr($translatedChordFormula, $this->notations);		
       		// this is the final chord (with bass)
       		// Db => C#, Eb => D# etc.
       		//$finalChord = strtr($chordRootNote.$translatedChordFormula.$translatedBassNote, $this->rootNotes);
   		
       		// this is the final chord (without bass)
       		$finalChord = strtr($chordRootNote . $translatedChordFormula, $this->rootNotes);// Db => C#, Eb => D# 
   
       		// number of variations
			if(isset($this->allChords[$finalChord])){
				$variations = $this->allChords[$finalChord]; 
			} else {
				$variations = 0;
				$this->missingChords[] = $finalChord; 
			}
       		
   		
       		// get chord box html
			$tmp[] = $finalChord;	

       		$chordLi .= '<li>' . $this->_htmlChordBox($finalChord, $variations, $slideId, $chordRootNote, $chordFormula, $bassNote) . '</li>';
       		$javascript .= $this->_jsChordBox($slideId);		
       		$slideId ++;
   		
   		
       		//$image_filename = "http://www.ukefy.com/chords/".urlencode(str_replace("/", "_", $chord))."~1.gif";
       		//$image_filename = "http://localhost/uke/chords/".$chordRootNote.$chordFormula.".gif";
       		//for($v=1;$v<=$variations;$v++){
       		//$chord_image_filename = "chords/".urlencode($finalChord)."~1.gif";		
       		//$html .= "<span class=\"chord\" style=\"background-image:url('".$chord_image_filename."');\">".$chordRootNote.$chordFormula."</span>";		
   	
       	}
		//debug($tmp);
		//debug($this->missingChords);
   		
       		/*
   		
       		$image_filename = "http://www.ukefy.com/chords/".urlencode(str_replace("/", "_", $chord)).".gif";					
       		@$url=getimagesize($image_filename);
       		if(is_array($url)){
       			$html .= "<img src='chords/".urlencode(str_replace("/", "_", $chord)).".gif'>";		
       		}else{
       			//$html .= "<a class='missing'  href='make_chord.php?missing_chord_name=".urlencode($chord)."'>Suggest the chord <br><strong>".$chord."</strong></a>";		
       			$html .= "<span class='missing'  href='make_chord.php?missing_chord_name=".urlencode($chord)."'>Ops! Dunno the <strong>".$chord."</strong>. I'm working on it.</strong></span>";		
       		}*/
   }

}
namespace Apimenti\Translator\ViewHelpers;

use Doctrine\ORM\Mapping as ORM;
use TYPO3\Flow\Annotations as Flow;

/**
 * View Helper which creates a control group form field based on twitter bootstrap
 */
class ChordViewHelper extends ChordViewHelper_Original implements \TYPO3\Flow\Object\Proxy\ProxyInterface {


	/**
	 * Autogenerated Proxy Method
	 */
	public function __construct() {
		parent::__construct();
		if ('Apimenti\Translator\ViewHelpers\ChordViewHelper' === get_class($this)) {
			$this->Flow_Proxy_injectProperties();
		}
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 public function __wakeup() {

	if (property_exists($this, 'Flow_Persistence_RelatedEntities') && is_array($this->Flow_Persistence_RelatedEntities)) {
		$persistenceManager = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface');
		foreach ($this->Flow_Persistence_RelatedEntities as $entityInformation) {
			$entity = $persistenceManager->getObjectByIdentifier($entityInformation['identifier'], $entityInformation['entityType'], TRUE);
			if (isset($entityInformation['entityPath'])) {
				$this->$entityInformation['propertyName'] = \TYPO3\Flow\Utility\Arrays::setValueByPath($this->$entityInformation['propertyName'], $entityInformation['entityPath'], $entity);
			} else {
				$this->$entityInformation['propertyName'] = $entity;
			}
		}
		unset($this->Flow_Persistence_RelatedEntities);
	}
				$this->Flow_Proxy_injectProperties();
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 public function __sleep() {
		$result = NULL;
		$this->Flow_Object_PropertiesToSerialize = array();
	$reflectionService = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Reflection\ReflectionService');
	$reflectedClass = new \ReflectionClass('Apimenti\Translator\ViewHelpers\ChordViewHelper');
	$allReflectedProperties = $reflectedClass->getProperties();
	foreach ($allReflectedProperties as $reflectionProperty) {
		$propertyName = $reflectionProperty->name;
		if (in_array($propertyName, array('Flow_Aop_Proxy_targetMethodsAndGroupedAdvices', 'Flow_Aop_Proxy_groupedAdviceChains', 'Flow_Aop_Proxy_methodIsInAdviceMode'))) continue;
		if ($reflectionService->isPropertyTaggedWith('Apimenti\Translator\ViewHelpers\ChordViewHelper', $propertyName, 'transient')) continue;
		if (is_array($this->$propertyName) || (is_object($this->$propertyName) && ($this->$propertyName instanceof \ArrayObject || $this->$propertyName instanceof \SplObjectStorage ||$this->$propertyName instanceof \Doctrine\Common\Collections\Collection))) {
			foreach ($this->$propertyName as $key => $value) {
				$this->searchForEntitiesAndStoreIdentifierArray((string)$key, $value, $propertyName);
			}
		}
		if (is_object($this->$propertyName) && !$this->$propertyName instanceof \Doctrine\Common\Collections\Collection) {
			if ($this->$propertyName instanceof \Doctrine\ORM\Proxy\Proxy) {
				$className = get_parent_class($this->$propertyName);
			} else {
				$className = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->getObjectNameByClassName(get_class($this->$propertyName));
			}
			if ($this->$propertyName instanceof \TYPO3\Flow\Persistence\Aspect\PersistenceMagicInterface && !\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface')->isNewObject($this->$propertyName) || $this->$propertyName instanceof \Doctrine\ORM\Proxy\Proxy) {
				if (!property_exists($this, 'Flow_Persistence_RelatedEntities') || !is_array($this->Flow_Persistence_RelatedEntities)) {
					$this->Flow_Persistence_RelatedEntities = array();
					$this->Flow_Object_PropertiesToSerialize[] = 'Flow_Persistence_RelatedEntities';
				}
				$identifier = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface')->getIdentifierByObject($this->$propertyName);
				if (!$identifier && $this->$propertyName instanceof \Doctrine\ORM\Proxy\Proxy) {
					$identifier = current(\TYPO3\Flow\Reflection\ObjectAccess::getProperty($this->$propertyName, '_identifier', TRUE));
				}
				$this->Flow_Persistence_RelatedEntities[$propertyName] = array(
					'propertyName' => $propertyName,
					'entityType' => $className,
					'identifier' => $identifier
				);
				continue;
			}
			if ($className !== FALSE && (\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->getScope($className) === \TYPO3\Flow\Object\Configuration\Configuration::SCOPE_SINGLETON || $className === 'TYPO3\Flow\Object\DependencyInjection\DependencyProxy')) {
				continue;
			}
		}
		$this->Flow_Object_PropertiesToSerialize[] = $propertyName;
	}
	$result = $this->Flow_Object_PropertiesToSerialize;
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 private function searchForEntitiesAndStoreIdentifierArray($path, $propertyValue, $originalPropertyName) {

		if (is_array($propertyValue) || (is_object($propertyValue) && ($propertyValue instanceof \ArrayObject || $propertyValue instanceof \SplObjectStorage))) {
			foreach ($propertyValue as $key => $value) {
				$this->searchForEntitiesAndStoreIdentifierArray($path . '.' . $key, $value, $originalPropertyName);
			}
		} elseif ($propertyValue instanceof \TYPO3\Flow\Persistence\Aspect\PersistenceMagicInterface && !\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface')->isNewObject($propertyValue) || $propertyValue instanceof \Doctrine\ORM\Proxy\Proxy) {
			if (!property_exists($this, 'Flow_Persistence_RelatedEntities') || !is_array($this->Flow_Persistence_RelatedEntities)) {
				$this->Flow_Persistence_RelatedEntities = array();
				$this->Flow_Object_PropertiesToSerialize[] = 'Flow_Persistence_RelatedEntities';
			}
			if ($propertyValue instanceof \Doctrine\ORM\Proxy\Proxy) {
				$className = get_parent_class($propertyValue);
			} else {
				$className = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->getObjectNameByClassName(get_class($propertyValue));
			}
			$identifier = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface')->getIdentifierByObject($propertyValue);
			if (!$identifier && $propertyValue instanceof \Doctrine\ORM\Proxy\Proxy) {
				$identifier = current(\TYPO3\Flow\Reflection\ObjectAccess::getProperty($propertyValue, '_identifier', TRUE));
			}
			$this->Flow_Persistence_RelatedEntities[$originalPropertyName . '.' . $path] = array(
				'propertyName' => $originalPropertyName,
				'entityType' => $className,
				'identifier' => $identifier,
				'entityPath' => $path
			);
			$this->$originalPropertyName = \TYPO3\Flow\Utility\Arrays::setValueByPath($this->$originalPropertyName, $path, NULL);
		}
			}

	/**
	 * Autogenerated Proxy Method
	 */
	 private function Flow_Proxy_injectProperties() {
		$this->injectObjectManager(\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Object\ObjectManagerInterface'));
		$this->injectSystemLogger(\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Log\SystemLoggerInterface'));
		$this->injectReflectionService(\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Reflection\ReflectionService'));
	}
}
#