<?php
namespace TYPO3\Surf\Encryption;

/*                                                                        *
 * This script belongs to the TYPO3 Flow package "TYPO3.Surf".            *
 *                                                                        *
 *                                                                        */

use TYPO3\Flow\Annotations as Flow;

/**
 * OpenSSL encryption service
 *
 * An encryption service for key generation and encryption / decryption of data
 * using the OpenSSL library.
 *
 * @Flow\Scope("singleton")
 */
class OpenSslEncryptionService_Original implements EncryptionServiceInterface {

	/**
	 * Generate a key pair (public / private key) with optional passphrase
	 * that protects the private key.
	 *
	 * @param string $passphrase
	 * @return \TYPO3\Surf\Encryption\KeyPair
	 */
	public function generateKeyPair($passphrase = NULL) {
		$privateKey = NULL;
		$encrypted = $passphrase !== NULL;
		$keyPair = openssl_pkey_new();
		openssl_pkey_export($keyPair, $privateKey, $passphrase);
		$keyDetails = openssl_pkey_get_details($keyPair);
		$publicKey = $keyDetails['key'];
		openssl_pkey_free($keyPair);

		return new \TYPO3\Surf\Encryption\KeyPair($privateKey, $publicKey, $encrypted);
	}

	/**
	 * Open (decrypt) a protected key pair
	 *
	 * @param \TYPO3\Surf\Encryption\KeyPair $keyPair
	 * @param string $passphrase
	 * @return \TYPO3\Surf\Encryption\KeyPair
	 */
	public function openKeyPair(\TYPO3\Surf\Encryption\KeyPair $keyPair, $passphrase) {
		return $this->exportKeyPair($keyPair, $passphrase);
	}

	/**
	 * Change the passphrase of a protected key pair
	 *
	 * @param \TYPO3\Surf\Encryption\KeyPair $keyPair
	 * @param string $oldPassphrase
	 * @param string $newPassphrase
	 * @return \TYPO3\Surf\Encryption\KeyPair
	 * @throws \InvalidArgumentException
	 */
	public function changePassphrase($keyPair, $oldPassphrase, $newPassphrase) {
		if (empty($newPassphrase)) {
			throw new \InvalidArgumentException('New passphrase must not be empty', 1300101668);
		}
		return $this->exportKeyPair($keyPair, $oldPassphrase, $newPassphrase);
	}

	/**
	 *
	 * @param string $data
	 * @param string $publicKey
	 * @return string
	 */
	public function encryptData($data, $publicKey) {
		$cryptedData = NULL;
		$envelopeKeys = NULL;
		openssl_seal($data, $cryptedData, $envelopeKeys, array($publicKey));
		$envelopeKey = $envelopeKeys[0];
		$crypted = base64_encode($envelopeKey) . ':' . base64_encode($cryptedData);
		return $crypted;
	}

	/**
	 *
	 * @param string $data
	 * @param string $privateKey
	 * @return string
	 * @throws \InvalidArgumentException
	 */
	public function decryptData($data, $privateKey) {
		if (!is_string($privateKey)) throw new \InvalidArgumentException('Private key should be given as string', 1300211696);

		list($envelopeKey, $cryptedData) = explode(':', $data, 2);
		$envelopeKey = base64_decode($envelopeKey);
		$cryptedData = base64_decode($cryptedData);
		openssl_open($cryptedData, $decrypted, $envelopeKey, $privateKey);
		return $decrypted;
	}

	/**
	 * Re-export the private key to change or disable the passphrase
	 *
	 * @param \TYPO3\Surf\Encryption\KeyPair $keyPair
	 * @param string $passphrase Passphrase for opening the key pair
	 * @param string $exportPassphrase Passphrase for the exported key pair (NULL for unencrypted private key)
	 * @return \TYPO3\Surf\Encryption\KeyPair
	 * @throws \InvalidArgumentException
	 */
	protected function exportKeyPair($keyPair, $passphrase, $exportPassphrase = NULL) {
		$privateKey = NULL;
		$encrypted = $exportPassphrase !== NULL;
		$key = openssl_pkey_get_private($keyPair->getPrivateKey(), $passphrase);
		if ($key === FALSE) {
			throw new \TYPO3\Surf\Encryption\InvalidPassphraseException('Invalid passphrase, could not open key', 1300101137);
		}
		openssl_pkey_export($key, $privateKey, $exportPassphrase);
		openssl_free_key($key);
		return new \TYPO3\Surf\Encryption\KeyPair($privateKey, $keyPair->getPublicKey(), $encrypted);
	}

}
namespace TYPO3\Surf\Encryption;

use Doctrine\ORM\Mapping as ORM;
use TYPO3\Flow\Annotations as Flow;

/**
 * OpenSSL encryption service
 * 
 * An encryption service for key generation and encryption / decryption of data
 * using the OpenSSL library.
 * @\TYPO3\Flow\Annotations\Scope("singleton")
 */
class OpenSslEncryptionService extends OpenSslEncryptionService_Original implements \TYPO3\Flow\Object\Proxy\ProxyInterface {


	/**
	 * Autogenerated Proxy Method
	 */
	public function __construct() {
		if (get_class($this) === 'TYPO3\Surf\Encryption\OpenSslEncryptionService') \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->setInstance('TYPO3\Surf\Encryption\OpenSslEncryptionService', $this);
		if (get_class($this) === 'TYPO3\Surf\Encryption\OpenSslEncryptionService') \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->setInstance('TYPO3\Surf\Encryption\EncryptionServiceInterface', $this);
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 public function __wakeup() {
		if (get_class($this) === 'TYPO3\Surf\Encryption\OpenSslEncryptionService') \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->setInstance('TYPO3\Surf\Encryption\OpenSslEncryptionService', $this);
		if (get_class($this) === 'TYPO3\Surf\Encryption\OpenSslEncryptionService') \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->setInstance('TYPO3\Surf\Encryption\EncryptionServiceInterface', $this);

	if (property_exists($this, 'Flow_Persistence_RelatedEntities') && is_array($this->Flow_Persistence_RelatedEntities)) {
		$persistenceManager = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface');
		foreach ($this->Flow_Persistence_RelatedEntities as $entityInformation) {
			$entity = $persistenceManager->getObjectByIdentifier($entityInformation['identifier'], $entityInformation['entityType'], TRUE);
			if (isset($entityInformation['entityPath'])) {
				$this->$entityInformation['propertyName'] = \TYPO3\Flow\Utility\Arrays::setValueByPath($this->$entityInformation['propertyName'], $entityInformation['entityPath'], $entity);
			} else {
				$this->$entityInformation['propertyName'] = $entity;
			}
		}
		unset($this->Flow_Persistence_RelatedEntities);
	}
			}

	/**
	 * Autogenerated Proxy Method
	 */
	 public function __sleep() {
		$result = NULL;
		$this->Flow_Object_PropertiesToSerialize = array();
	$reflectionService = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Reflection\ReflectionService');
	$reflectedClass = new \ReflectionClass('TYPO3\Surf\Encryption\OpenSslEncryptionService');
	$allReflectedProperties = $reflectedClass->getProperties();
	foreach ($allReflectedProperties as $reflectionProperty) {
		$propertyName = $reflectionProperty->name;
		if (in_array($propertyName, array('Flow_Aop_Proxy_targetMethodsAndGroupedAdvices', 'Flow_Aop_Proxy_groupedAdviceChains', 'Flow_Aop_Proxy_methodIsInAdviceMode'))) continue;
		if ($reflectionService->isPropertyTaggedWith('TYPO3\Surf\Encryption\OpenSslEncryptionService', $propertyName, 'transient')) continue;
		if (is_array($this->$propertyName) || (is_object($this->$propertyName) && ($this->$propertyName instanceof \ArrayObject || $this->$propertyName instanceof \SplObjectStorage ||$this->$propertyName instanceof \Doctrine\Common\Collections\Collection))) {
			foreach ($this->$propertyName as $key => $value) {
				$this->searchForEntitiesAndStoreIdentifierArray((string)$key, $value, $propertyName);
			}
		}
		if (is_object($this->$propertyName) && !$this->$propertyName instanceof \Doctrine\Common\Collections\Collection) {
			if ($this->$propertyName instanceof \Doctrine\ORM\Proxy\Proxy) {
				$className = get_parent_class($this->$propertyName);
			} else {
				$className = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->getObjectNameByClassName(get_class($this->$propertyName));
			}
			if ($this->$propertyName instanceof \TYPO3\Flow\Persistence\Aspect\PersistenceMagicInterface && !\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface')->isNewObject($this->$propertyName) || $this->$propertyName instanceof \Doctrine\ORM\Proxy\Proxy) {
				if (!property_exists($this, 'Flow_Persistence_RelatedEntities') || !is_array($this->Flow_Persistence_RelatedEntities)) {
					$this->Flow_Persistence_RelatedEntities = array();
					$this->Flow_Object_PropertiesToSerialize[] = 'Flow_Persistence_RelatedEntities';
				}
				$identifier = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface')->getIdentifierByObject($this->$propertyName);
				if (!$identifier && $this->$propertyName instanceof \Doctrine\ORM\Proxy\Proxy) {
					$identifier = current(\TYPO3\Flow\Reflection\ObjectAccess::getProperty($this->$propertyName, '_identifier', TRUE));
				}
				$this->Flow_Persistence_RelatedEntities[$propertyName] = array(
					'propertyName' => $propertyName,
					'entityType' => $className,
					'identifier' => $identifier
				);
				continue;
			}
			if ($className !== FALSE && (\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->getScope($className) === \TYPO3\Flow\Object\Configuration\Configuration::SCOPE_SINGLETON || $className === 'TYPO3\Flow\Object\DependencyInjection\DependencyProxy')) {
				continue;
			}
		}
		$this->Flow_Object_PropertiesToSerialize[] = $propertyName;
	}
	$result = $this->Flow_Object_PropertiesToSerialize;
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 private function searchForEntitiesAndStoreIdentifierArray($path, $propertyValue, $originalPropertyName) {

		if (is_array($propertyValue) || (is_object($propertyValue) && ($propertyValue instanceof \ArrayObject || $propertyValue instanceof \SplObjectStorage))) {
			foreach ($propertyValue as $key => $value) {
				$this->searchForEntitiesAndStoreIdentifierArray($path . '.' . $key, $value, $originalPropertyName);
			}
		} elseif ($propertyValue instanceof \TYPO3\Flow\Persistence\Aspect\PersistenceMagicInterface && !\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface')->isNewObject($propertyValue) || $propertyValue instanceof \Doctrine\ORM\Proxy\Proxy) {
			if (!property_exists($this, 'Flow_Persistence_RelatedEntities') || !is_array($this->Flow_Persistence_RelatedEntities)) {
				$this->Flow_Persistence_RelatedEntities = array();
				$this->Flow_Object_PropertiesToSerialize[] = 'Flow_Persistence_RelatedEntities';
			}
			if ($propertyValue instanceof \Doctrine\ORM\Proxy\Proxy) {
				$className = get_parent_class($propertyValue);
			} else {
				$className = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->getObjectNameByClassName(get_class($propertyValue));
			}
			$identifier = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface')->getIdentifierByObject($propertyValue);
			if (!$identifier && $propertyValue instanceof \Doctrine\ORM\Proxy\Proxy) {
				$identifier = current(\TYPO3\Flow\Reflection\ObjectAccess::getProperty($propertyValue, '_identifier', TRUE));
			}
			$this->Flow_Persistence_RelatedEntities[$originalPropertyName . '.' . $path] = array(
				'propertyName' => $originalPropertyName,
				'entityType' => $className,
				'identifier' => $identifier,
				'entityPath' => $path
			);
			$this->$originalPropertyName = \TYPO3\Flow\Utility\Arrays::setValueByPath($this->$originalPropertyName, $path, NULL);
		}
			}
}
#