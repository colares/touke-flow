<?php

namespace Apimenti\Translator\ViewHelpers;

/**
 * View Helper which creates a control group form field based on twitter bootstrap
 */
use TYPO3\Flow\Annotations as Flow;

class ChordBoxViewHelper_Original extends \TYPO3\Fluid\Core\ViewHelper\AbstractConditionViewHelper {

    /**
     * @Flow\Inject
     * @var \Apimenti\Translator\Domain\Model\Chord
     */
    protected $chord;

    /**
     * Initialize Arguments
     */
    public function initializeArguments() {
        $this->registerArgument('chordOriginal', 'string', 'Chord Original Name');
        $this->registerArgument('chordRootNote', 'string', 'Chord Root Note');
        $this->registerArgument('chordFormula', 'string', 'Chord Formula');
    }

    /**
     *
     * @return string the rendered string
     */
    public function render() {
        return $this->buildChordBox($this->arguments['chordOriginal'], $this->arguments['chordRootNote'], $this->arguments['chordFormula']);
    }
    
    /**
     * Build Chord Box
     * @param type $chordRootNote
     * @param type $chordFormula
     * @return type 
     */
    private function buildChordBox($chordOriginal, $chordRootNote, $chordFormula) {
        $finalChord = $this->translateChord($chordRootNote, $chordFormula);
        $variations = $this->countVariations($finalChord);
        if($variations>1){
            return '<div class="thumbnail" style="text-align: center; width:75px; height: 100px; float: left; margin: 0px 10px 10px 0px" >
    <strong>'. $chordOriginal . 
'  </strong>  
      '. "<img src=\"_Resources/Static/Packages/Apimenti.Translator/img/chords/$finalChord~1.gif\" alt=\"Smiley face\">" . '
      
    </div>

     ';
            //return $this->chordBoxN($finalChord, $variations, $slideId, $chordRootNote, $chordFormula, $bassNote);
        //}
//        if($variations>1){
//            return $this->chordBoxN($finalChord, $variations, $slideId, $chordRootNote, $chordFormula, $bassNote);
//        }else if($variations == 1){
//            return $this->chordBox1($finalChord, $variations, $slideId, $chordRootNote, $chordFormula, $bassNote);
        }else{
                        return '<div class="thumbnail" style="text-align: center; width:75px; height: 100px; float: left; margin: 0px 10px 10px 0px" >
    <strong>'. $chordOriginal . 
'  </strong>  
      '. "<img src=\"_Resources/Static/Packages/Apimenti.Translator/img/sad-donkey.png\" alt=\"Esse eu nÃ£o sei...\">" . '
      
    </div>

     ';
        }
    }

    /**
     * Count the number of existent variations of a given chord
     * @param int $finalChord 
     */
    private function countVariations($finalChord) {
			if(isset($this->chord->allChords[$finalChord])){
             return $this->chord->allChords[$finalChord]; 
			}
         return 0;
    }
    
    /**
     * Translate Chord to expetected format
     * 
     * @param string $chordRootNote
     * @param string $chordFormula
     * @return string
     */
    private function translateChord($chordRootNote, $chordFormula) {
        $translatedChordFormula = strtr($chordFormula, $this->chord->notations);
        // this is the final chord (with bass)
        // Db => C#, Eb => D# etc.
        //$finalChord = strtr($chordRootNote.$translatedChordFormula.$translatedBassNote, $this->rootNotes);
        // this is the final chord (without bass)
        return strtr($chordRootNote . $translatedChordFormula, $this->chord->rootNotes); // Db => C#, Eb => D# 
    }

}

namespace Apimenti\Translator\ViewHelpers;

use Doctrine\ORM\Mapping as ORM;
use TYPO3\Flow\Annotations as Flow;

/**
 * View Helper which creates a control group form field based on twitter bootstrap
 */
class ChordBoxViewHelper extends ChordBoxViewHelper_Original implements \TYPO3\Flow\Object\Proxy\ProxyInterface {


	/**
	 * Autogenerated Proxy Method
	 */
	public function __construct() {
		parent::__construct();
		if ('Apimenti\Translator\ViewHelpers\ChordBoxViewHelper' === get_class($this)) {
			$this->Flow_Proxy_injectProperties();
		}
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 public function __wakeup() {

	if (property_exists($this, 'Flow_Persistence_RelatedEntities') && is_array($this->Flow_Persistence_RelatedEntities)) {
		$persistenceManager = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface');
		foreach ($this->Flow_Persistence_RelatedEntities as $entityInformation) {
			$entity = $persistenceManager->getObjectByIdentifier($entityInformation['identifier'], $entityInformation['entityType'], TRUE);
			if (isset($entityInformation['entityPath'])) {
				$this->$entityInformation['propertyName'] = \TYPO3\Flow\Utility\Arrays::setValueByPath($this->$entityInformation['propertyName'], $entityInformation['entityPath'], $entity);
			} else {
				$this->$entityInformation['propertyName'] = $entity;
			}
		}
		unset($this->Flow_Persistence_RelatedEntities);
	}
				$this->Flow_Proxy_injectProperties();
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 public function __sleep() {
		$result = NULL;
		$this->Flow_Object_PropertiesToSerialize = array();
	$reflectionService = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Reflection\ReflectionService');
	$reflectedClass = new \ReflectionClass('Apimenti\Translator\ViewHelpers\ChordBoxViewHelper');
	$allReflectedProperties = $reflectedClass->getProperties();
	foreach ($allReflectedProperties as $reflectionProperty) {
		$propertyName = $reflectionProperty->name;
		if (in_array($propertyName, array('Flow_Aop_Proxy_targetMethodsAndGroupedAdvices', 'Flow_Aop_Proxy_groupedAdviceChains', 'Flow_Aop_Proxy_methodIsInAdviceMode'))) continue;
		if ($reflectionService->isPropertyTaggedWith('Apimenti\Translator\ViewHelpers\ChordBoxViewHelper', $propertyName, 'transient')) continue;
		if (is_array($this->$propertyName) || (is_object($this->$propertyName) && ($this->$propertyName instanceof \ArrayObject || $this->$propertyName instanceof \SplObjectStorage ||$this->$propertyName instanceof \Doctrine\Common\Collections\Collection))) {
			foreach ($this->$propertyName as $key => $value) {
				$this->searchForEntitiesAndStoreIdentifierArray((string)$key, $value, $propertyName);
			}
		}
		if (is_object($this->$propertyName) && !$this->$propertyName instanceof \Doctrine\Common\Collections\Collection) {
			if ($this->$propertyName instanceof \Doctrine\ORM\Proxy\Proxy) {
				$className = get_parent_class($this->$propertyName);
			} else {
				$className = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->getObjectNameByClassName(get_class($this->$propertyName));
			}
			if ($this->$propertyName instanceof \TYPO3\Flow\Persistence\Aspect\PersistenceMagicInterface && !\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface')->isNewObject($this->$propertyName) || $this->$propertyName instanceof \Doctrine\ORM\Proxy\Proxy) {
				if (!property_exists($this, 'Flow_Persistence_RelatedEntities') || !is_array($this->Flow_Persistence_RelatedEntities)) {
					$this->Flow_Persistence_RelatedEntities = array();
					$this->Flow_Object_PropertiesToSerialize[] = 'Flow_Persistence_RelatedEntities';
				}
				$identifier = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface')->getIdentifierByObject($this->$propertyName);
				if (!$identifier && $this->$propertyName instanceof \Doctrine\ORM\Proxy\Proxy) {
					$identifier = current(\TYPO3\Flow\Reflection\ObjectAccess::getProperty($this->$propertyName, '_identifier', TRUE));
				}
				$this->Flow_Persistence_RelatedEntities[$propertyName] = array(
					'propertyName' => $propertyName,
					'entityType' => $className,
					'identifier' => $identifier
				);
				continue;
			}
			if ($className !== FALSE && (\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->getScope($className) === \TYPO3\Flow\Object\Configuration\Configuration::SCOPE_SINGLETON || $className === 'TYPO3\Flow\Object\DependencyInjection\DependencyProxy')) {
				continue;
			}
		}
		$this->Flow_Object_PropertiesToSerialize[] = $propertyName;
	}
	$result = $this->Flow_Object_PropertiesToSerialize;
		return $result;
	}

	/**
	 * Autogenerated Proxy Method
	 */
	 private function searchForEntitiesAndStoreIdentifierArray($path, $propertyValue, $originalPropertyName) {

		if (is_array($propertyValue) || (is_object($propertyValue) && ($propertyValue instanceof \ArrayObject || $propertyValue instanceof \SplObjectStorage))) {
			foreach ($propertyValue as $key => $value) {
				$this->searchForEntitiesAndStoreIdentifierArray($path . '.' . $key, $value, $originalPropertyName);
			}
		} elseif ($propertyValue instanceof \TYPO3\Flow\Persistence\Aspect\PersistenceMagicInterface && !\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface')->isNewObject($propertyValue) || $propertyValue instanceof \Doctrine\ORM\Proxy\Proxy) {
			if (!property_exists($this, 'Flow_Persistence_RelatedEntities') || !is_array($this->Flow_Persistence_RelatedEntities)) {
				$this->Flow_Persistence_RelatedEntities = array();
				$this->Flow_Object_PropertiesToSerialize[] = 'Flow_Persistence_RelatedEntities';
			}
			if ($propertyValue instanceof \Doctrine\ORM\Proxy\Proxy) {
				$className = get_parent_class($propertyValue);
			} else {
				$className = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->getObjectNameByClassName(get_class($propertyValue));
			}
			$identifier = \TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Persistence\PersistenceManagerInterface')->getIdentifierByObject($propertyValue);
			if (!$identifier && $propertyValue instanceof \Doctrine\ORM\Proxy\Proxy) {
				$identifier = current(\TYPO3\Flow\Reflection\ObjectAccess::getProperty($propertyValue, '_identifier', TRUE));
			}
			$this->Flow_Persistence_RelatedEntities[$originalPropertyName . '.' . $path] = array(
				'propertyName' => $originalPropertyName,
				'entityType' => $className,
				'identifier' => $identifier,
				'entityPath' => $path
			);
			$this->$originalPropertyName = \TYPO3\Flow\Utility\Arrays::setValueByPath($this->$originalPropertyName, $path, NULL);
		}
			}

	/**
	 * Autogenerated Proxy Method
	 */
	 private function Flow_Proxy_injectProperties() {
		$this->injectObjectManager(\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Object\ObjectManagerInterface'));
		$this->injectSystemLogger(\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Log\SystemLoggerInterface'));
		$this->injectReflectionService(\TYPO3\Flow\Core\Bootstrap::$staticObjectManager->get('TYPO3\Flow\Reflection\ReflectionService'));
		$this->chord = new \Apimenti\Translator\Domain\Model\Chord();
	}
}
#